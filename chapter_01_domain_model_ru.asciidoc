[[chapter_01_domain_model]]
== Domain Modeling

((("domain modeling", id="ix_dommod")))
((("domain driven design (DDD)", seealso="domain model; domain modeling")))
В этой главе рассматривается, как можно моделировать бизнес-процессы с помощью кода таким образом, чтобы он был полностью совместим с TDD (Test Driven Development).  Обсудим, почему моделирование домена имеет значение, и рассмотрим несколько ключевых шаблонов для моделирования доменов: Entity, Value Object, и Domain Service.

<<maps_chapter_01_notext>> это простое визуальное представление для нашего шаблона Domain Model. В этой главе мы расскажем о некоторых деталях, а когда перейдем к другим главам, то построим все вокруг Domain Model, но вы всегда должны быть в состоянии найти эти маленькие формы в центре.

[[maps_chapter_01_notext]]
.Иллюстрация прототипа нашей модели предметной области (Domain Model)
image::images/apwp_0101.png[]

[role="pagebreak-before less_space"]
=== Что такое Domain Model?

((("business logic layer")))
В <<introduction, introduction>> мы использовали термин _business logic layer_ для описания центрального слоя трехслойной архитектуры. Для остальной части книги будем использовать термин _domain model_. Это термин из методологии Domain Driven Design (DDD), который лучше улавливает наш предполагаемый смысл (подробнее о DDD читайте дальше).

((("domain driven design (DDD)", "domain, defined")))
_domain_ это причудливый способ обозначить _проблему, которую вы пытаетесь решить._
В настоящее время ваши авторы работают в мебельном интернет-магазине.  В зависимости от того, о какой системе вы говорите, предметной областью может быть совершение разовых покупок и закупка по долгосрочным договорам, дизайн продукта или логистика и доставка. Большинство программистов проводят свои дни в попытках улучшить или автоматизировать бизнес-процессы; домен является набором действий, которые поддерживают эти процессы.

((("model (domain)")))
_model_ - это карта процесса или явления, которая фиксирует полезное свойство.
Люди исключительно хороши в производстве моделей вещей в их головах. Например, когда кто-то бросает в вас мяч, вы можете предсказать его движение почти бессознательно, потому что у вас есть модель движения объектов в пространстве. Ваша модель ни в коем случае не идеальна. У людей есть ужасные интуитивные представления о том, как объекты ведут себя на околосветовых скоростях или в вакууме, потому что наша модель никогда не предназначалась для этих случаев. Это не означает, что модель неверна, но это означает, что некоторые прогнозы выходят за рамки ее области.

Модель предметной области-это ментальная карта, которую владельцы бизнеса имеют о своем бизнесе. У всех деловых людей есть эти ментальные карты-это то, как люди думают о сложных процессах.

Вы можете сказать, когда они ориентируются по этим картам, потому что они используют деловой язык.
Жаргон возникает естественным образом среди людей, которые сотрудничают в сложных системах.

Представьте себе, что вы, наш несчастный читатель, внезапно перенеслись за много световых лет от Земли на борту инопланетного космического корабля со своими друзьями и семьей и должны выяснить, исходя из первых принципов, как вернуться домой.

В первые несколько дней вы наверное будете просто нажимать кнопки случайным образом, но вскоре разберётесь, какие кнопки что делают и сможете давать друг другу инструкции. "Нажми красную кнопку возле мигающей штуковины, а затем пребрось этот большой рычаг рядом с радарной хреновиной", - скажете вы.

Через пару недель вы станете более точными, определив слова для описания функций корабля: "Увеличить уровень кислорода в третьем грузовом отсеке" или "включите дополнительные двигатели." Через несколько месяцев вы бы придумали язык для целых сложных процессов: "Начать программу посадки " или "приготовиться к перегрузке." Этот процесс происходил бы совершенно естественно, без каких-либо формальных усилий по созданию общего глоссария.

[role="nobreakinside less_space"]
.Это не книга DDD. Вам следует прочитать книгу DDD.
*****************************************************************

Domain-driven design, или же DDD, популяризировал концепцию моделирования предметной области,footnote:[ DDD не был инициатором моделирования предметной области. Эрик Эванс ссылается на книгу 2002 года _Object Design_ за авторством Rebecca Wirfs-Brock и Alan McKean  (Addison-Wesley Professional), который ввел дизайн, основанный на ответственности, из которых DDD является частным случаем, связанным с доменом. Но даже это слишком поздно, и энтузиасты ОО скажут вам, чтобы вы посмотрели дальше назад на Ивара Якобсона и Грейди Буча; этот термин существует с середины 1980-х годов.((("domain driven design (DDD)")))]
и это было чрезвычайно успешное движение в изменении способа разработки программного обеспечения, сосредоточенного на основной сфере бизнеса. Многие из шаблонов архитектуры, которые мы рассматриваем в этой книге, включая Entity, Aggregate, Value Object (см. <<chapter_07_aggregate>>), and Repository (в
<<chapter_02_repository,the next chapter>>)—происходят из традиции DDD.

Короче говоря, DDD говорит, что самое важное в программном обеспечении - это то, что оно предоставляет полезную модель проблемы. Если мы правильно воспользуемся этой моделью, наше программное обеспечение принесет пользу и сделает возможным новые вещи.

Если мы ошибаемся в модели, это становится препятствием, над которым нужно работать. В этой книге мы можем показать основы построения модели предметной области и построения на её основе архитектуры, которая максимально освобождает модель от внешних ограничений, чтобы её было легко развить и изменить.

Но в DDD и в процессах, инструментах и методах разработки модели предметной области есть гораздо больше. Тем не менее, мы надеемся дать вам почувствовать это на вкус и в достаточной мере побудить вас продолжить и прочитать соответствующую книгу DDD:

* The original "blue book," _Domain-Driven Design_ by Eric Evans (Addison-Wesley Professional)
* The "red book," _Implementing Domain-Driven Design_
  by Vaughn Vernon (Addison-Wesley Professional)

*****************************************************************

Так и в обычном мире бизнеса. Терминология, используемая заинтересованными сторонами бизнеса, представляет собой дистиллированное понимание модели предметной области, где сложные идеи и процессы сводятся к одному слову или фразе.

Когда мы слышим, как наши деловые партнеры используют незнакомые слова или используют термины определенным образом, мы должны слушать, чтобы понять более глубокий смысл и закодировать их с трудом завоеванный опыт в наше программное обеспечение.

В этой книге мы будем использовать модель предметной области реального мира, в частности модель из нашей текущей работы. MADE.com является успешным мебельным ритейлером. Мы поставляем нашу мебель от производителей по всему миру и продаем её по всей Европе.

Когда вы покупаете диван или журнальный столик, мы должны решить, как лучше всего доставить ваш товар из Польши, Китая или Вьетнама в вашу гостиную.

На высоком уровне у нас есть отдельные системы, которые отвечают за покупку акций, продажу акций клиентам и доставку товаров клиентам. Система в середине должна координировать процесс, распределяя запасы по заказам клиента; см. <<allocation_context_diagram>>.

[[allocation_context_diagram]]
.Контекстная диаграмма для службы распределения
image::images/apwp_0102ru.png[]
[role="image-source"]
----
[plantuml, apwp_0102]
@startuml Allocation Context Diagram
!include images/C4_Context.puml
scale 2

System(systema, "Allocation", "Распределяет запасы по заказам клиентов")

Person(customer, "Customer", "Хочет купить мебель")
Person(buyer, "Buying Team", "Потребности в покупке мебели у поставщиков")

System(procurement, "Purchasing" Совершение закупок
, "Manages workflow for buying stock from suppliers") Управляет рабочим процессом покупки запасов у поставщиков
System(ecom, "Ecommerce", "Sells goods online") Продает товары онлайн
System(warehouse, "Warehouse", "Manages workflow for shipping goods to customers") Управляет рабочим процессом доставки товаров покупателям

Rel(buyer, procurement, "Uses")Использует
Rel(procurement, systema, "Notifies about shipments") Уведомляет о доставке
Rel(customer, ecom, "Buys from") Покупает у
Rel(ecom, systema, "Asks for stock levels") Запрашивает уровень запасов
Rel(ecom, systema, "Notifies about orders") Уведомляет о заказах
Rel_R(systema, warehouse, "Sends instructions to") Отправляет инструкции
Rel_U(warehouse, customer, "Dispatches goods to") Отправляет товар в

@enduml
----

В рамках этой книги, пофантазируем, что фирма решает внедрить новый способ распределения запасов.  До сих пор компания представляла товар и время выполнения заказа на основе того, что физически доступно на складе.  Если и вдруг склад пустеет, продукт считается "отсутствующим на складе" до тех пор, пока не поступит следующая партия от производителя.

Новая идея такова: если у нас есть система, которая может отслеживать все наши поставки и когда они должны прибыть, мы можем рассматривать товары на этих кораблях как реальные запасы и часть нашего инвентаря, просто с немного более длительным временем выполнения заказа. Не смотря на небольшие складские запасы, продавать будем больше, а бизнес сможет сэкономить деньги, уменьшив запасы на внутреннем складе.

Но распределение заказов больше не является тривиальным вопросом уменьшения одного количества в складской системе. Нам нужен более сложный механизм распределения. Время для некоторого моделирования предметной области.


=== Изучение языка предметной области

((("domain language")))
((("domain modeling", "domain language")))
Understanding the domain model takes time, and patience, and Post-it notes. We
have an initial conversation with our business experts and agree on a glossary
and some rules for the first minimal version of the domain model. Wherever
possible, we ask for concrete examples to illustrate each rule.

We make sure to express those rules in the business jargon (the _ubiquitous
language_ in DDD terminology). We choose memorable identifiers for our objects
so that the examples are easier to talk about.

<<allocation_notes,The following sidebar>> shows some notes we might have taken while having a
conversation with our domain experts about allocation.

[[allocation_notes]]
.Some Notes on Allocation
****
A _product_ is identified by a _SKU_, pronounced "skew," which is short for _stock-keeping unit_. _Customers_ place _orders_. An order is identified by an _order reference_
and comprises multiple _order lines_, where each line has a _SKU_ and a _quantity_. For example:

- 10 units of RED-CHAIR
- 1 unit of TASTELESS-LAMP

The purchasing department orders small _batches_ of stock. A _batch_ of stock has a unique ID called a _reference_, a _SKU_, and a _quantity_.

We need to _allocate_ _order lines_ to _batches_. When we've allocated an
order line to a batch, we will send stock from that specific batch to the
customer's delivery address. When we allocate _x_ units of stock to a batch, the _available quantity_ is reduced by _x_. For example:

- We have a batch of 20 SMALL-TABLE, and we allocate an order line for 2 SMALL-TABLE.
- The batch should have 18 SMALL-TABLE remaining.

We can't allocate to a batch if the available quantity is less than the quantity of the order line. For example:

- We have a batch of 1 BLUE-CUSHION, and an order line for 2 BLUE-CUSHION.
- We should not be able to allocate the line to the batch.

We can't allocate the same line twice. For example:

- We have a batch of 10 BLUE-VASE, and we allocate an order line for 2 BLUE-VASE.
- If we allocate the order line again to the same batch, the batch should still
  have an available quantity of 8.

Batches have an _ETA_ if they are currently shipping, or they may be in _warehouse stock_. We allocate to warehouse stock in preference to shipment batches. We allocate to shipment batches in order of which has the earliest ETA.
****

=== Unit Testing Domain Models

((("unit testing", "of domain models", id="ix_UTDM")))
((("domain modeling", "unit testing domain models", id="ix_dommodUT")))
We're not going to show you how TDD works in this book, but we want to show you
how we would construct a model from this business conversation.

[role="nobreakinside less_space"]
.Exercise for the Reader
******************************************************************************
Why not have a go at solving this problem yourself? Write a few unit tests to
see if you can capture the essence of these business rules in nice, clean
code.

You'll find some https://github.com/cosmicpython/code/tree/chapter_01_domain_model_exercise[placeholder unit tests on GitHub], but you could just start from
scratch, or combine/rewrite them however you like.

//TODO: add test_cannot_allocate_same_line_twice ?
//(EJ3): nice to have for completeness, but not necessary

******************************************************************************

Here's what one of our first tests might look like:

[[first_test]]
.A first test for allocation (test_batches.py)
====
[source,python]
----
def test_allocating_to_a_batch_reduces_the_available_quantity():
    batch = Batch("batch-001", "SMALL-TABLE", qty=20, eta=date.today())
    line = OrderLine('order-ref', "SMALL-TABLE", 2)

    batch.allocate(line)

    assert batch.available_quantity == 18
----
====

The name of our unit test describes the behavior that we want to see from the
system, and the names of the classes and variables that we use are taken from the
business jargon. We could show this code to our nontechnical coworkers, and
they would agree that this correctly describes the behavior of the system.

[role="pagebreak-before"]
And here is a domain model that meets our requirements:

[[domain_model_1]]
.First cut of a domain model for batches (model.py)
====
[source,python]
[role="non-head"]
----
@dataclass(frozen=True)  #<1><2>
class OrderLine:
    orderid: str
    sku: str
    qty: int


class Batch:
    def __init__(
        self, ref: str, sku: str, qty: int, eta: Optional[date]  #<2>
    ):
        self.reference = ref
        self.sku = sku
        self.eta = eta
        self.available_quantity = qty

    def allocate(self, line: OrderLine):
        self.available_quantity -= line.qty  #<3>
----
====

<1> `OrderLine` is an immutable dataclass
    with no behavior.footnote:[In previous Python versions, we
    might have used a namedtuple. You could also check out Hynek Schlawack's
    excellent https://pypi.org/project/attrs[attrs].]

<2> We're not showing imports in most code listings, in an attempt to keep them
    clean. We're hoping you can guess
    that this came via `from dataclasses import dataclass`; likewise,
    `typing.Optional` and `datetime.date`. If you want to double-check
    anything, you can see the full working code for each chapter in
    its branch (e.g.,
    https://github.com/python-leap/code/tree/chapter_01_domain_model[chapter_01_domain_model]).

<3> Type hints are still a matter of controversy in the Python world. For
    domain models, they can sometimes help to clarify or document what the
    expected arguments are, and people with IDEs are often grateful for them.
    You may decide the price paid in terms of readability is too high.
    ((("type hints")))

Our implementation here is trivial: a `Batch` just wraps an integer
`available_quantity`, and we decrement that value on allocation. We've written
quite a lot of code just to subtract one number from another, but we think that modeling our
domain precisely will pay off.footnote:[
Or perhaps you think there's not enough code?  What about some sort of check
that the SKU in the `OrderLine` matches `Batch.sku`?  We saved some thoughts on
validation for <<appendix_validation>>.]

Let's write some new failing tests:


[[test_can_allocate]]
.Testing logic for what we can allocate (test_batches.py)
====
[source,python]
----
def make_batch_and_line(sku, batch_qty, line_qty):
    return (
        Batch("batch-001", sku, batch_qty, eta=date.today()),
        OrderLine("order-123", sku, line_qty)
    )


def test_can_allocate_if_available_greater_than_required():
    large_batch, small_line = make_batch_and_line("ELEGANT-LAMP", 20, 2)
    assert large_batch.can_allocate(small_line)

def test_cannot_allocate_if_available_smaller_than_required():
    small_batch, large_line = make_batch_and_line("ELEGANT-LAMP", 2, 20)
    assert small_batch.can_allocate(large_line) is False

def test_can_allocate_if_available_equal_to_required():
    batch, line = make_batch_and_line("ELEGANT-LAMP", 2, 2)
    assert batch.can_allocate(line)

def test_cannot_allocate_if_skus_do_not_match():
    batch = Batch("batch-001", "UNCOMFORTABLE-CHAIR", 100, eta=None)
    different_sku_line = OrderLine("order-123", "EXPENSIVE-TOASTER", 10)
    assert batch.can_allocate(different_sku_line) is False
----
====

There's nothing too unexpected here. We've refactored our test suite so that we
don't keep repeating the same lines of code to create a batch and a line for
the same SKU; and we've written four simple tests for a new method
`can_allocate`. Again, notice that the names we use mirror the language of our
domain experts, and the examples we agreed upon are directly written into code.

We can implement this straightforwardly, too, by writing the `can_allocate`
method of `Batch`:


[[can_allocate]]
.A new method in the model (model.py)
====
[source,python]
----
    def can_allocate(self, line: OrderLine) -> bool:
        return self.sku == line.sku and self.available_quantity >= line.qty
----
====

So far, we can manage the implementation by just incrementing and decrementing
`Batch.available_quantity`, but as we get into `deallocate()` tests, we'll be
forced into a more intelligent solution:

[role="pagebreak-before"]
[[test_deallocate_unallocated]]
.This test is going to require a smarter model (test_batches.py)
====
[source,python]
----
def test_can_only_deallocate_allocated_lines():
    batch, unallocated_line = make_batch_and_line("DECORATIVE-TRINKET", 20, 2)
    batch.deallocate(unallocated_line)
    assert batch.available_quantity == 20
----
====

In this test, we're asserting that deallocating a line from a batch has no effect
unless the batch previously allocated the line. For this to work, our `Batch`
needs to understand which lines have been allocated. Let's look at the
implementation:


[[domain_model_complete]]
.The domain model now tracks allocations (model.py)
====
[source,python]
[role="non-head"]
----
class Batch:
    def __init__(
        self, ref: str, sku: str, qty: int, eta: Optional[date]
    ):
        self.reference = ref
        self.sku = sku
        self.eta = eta
        self._purchased_quantity = qty
        self._allocations = set()  # type: Set[OrderLine]

    def allocate(self, line: OrderLine):
        if self.can_allocate(line):
            self._allocations.add(line)

    def deallocate(self, line: OrderLine):
        if line in self._allocations:
            self._allocations.remove(line)

    @property
    def allocated_quantity(self) -> int:
        return sum(line.qty for line in self._allocations)

    @property
    def available_quantity(self) -> int:
        return self._purchased_quantity - self.allocated_quantity

    def can_allocate(self, line: OrderLine) -> bool:
        return self.sku == line.sku and self.available_quantity >= line.qty

----
====

// TODO: consider a diff here
// TODO explain why harry refuses to use the inline type hints syntax

<<model_diagram>> shows the model in UML.


[[model_diagram]]
.Our model in UML
image::images/apwp_0103.png[]
[role="image-source"]
----
[plantuml, apwp_0103, config=plantuml.cfg]
@startuml
scale 4

left to right direction
hide empty members

class Batch {
    reference
    sku
    eta
    _purchased_quantity
    _allocations
}

class OrderLine {
    orderid
    sku
    qty
}

Batch::_allocations o-- OrderLine
----


Now we're getting somewhere! A batch now keeps track of a set of allocated
`OrderLine` objects. When we allocate, if we have enough available quantity, we
just add to the set. Our `available_quantity` is now a calculated property:
purchased quantity minus allocated quantity.

Yes, there's plenty more we could do. It's a little disconcerting that
both `allocate()` and `deallocate()` can fail silently, but we have the
basics.

Incidentally, using a set for `._allocations` makes it simple for us
to handle the last test, because items in a set are unique:


[[last_test]]
.Last batch test!  (test_batches.py)
====
[source,python]
----
def test_allocation_is_idempotent():
    batch, line = make_batch_and_line("ANGULAR-DESK", 20, 2)
    batch.allocate(line)
    batch.allocate(line)
    assert batch.available_quantity == 18
----
====

At the moment, it's probably a valid criticism to say that the domain model is
too trivial to bother with DDD (or even object orientation!). In real life,
any number of business rules and edge cases crop up: customers can ask for
delivery on specific future dates, which means we might not want to allocate
them to the earliest batch. Some SKUs aren't in batches, but ordered on
demand directly from suppliers, so they have different logic. Depending on the
customer's location, we can allocate to only a subset of warehouses and shipments
that are in their region—except for some SKUs we're happy to deliver from a
warehouse in a different region if we're out of stock in the home region. And
so on.  A real business in the real world knows how to pile on complexity faster
than we can show on the page!

But taking this simple domain model as a placeholder for something more
complex, we're going to extend our simple domain model in the rest of the book
and plug it into the real world of APIs and databases and spreadsheets. We'll
see how sticking rigidly to our principles of encapsulation and careful
layering will help us to avoid a ball of mud.


[role="nobreakinside"]
.More Types for More Type Hints
*******************************************************************************

((("type hints")))
If you really want to go to town with type hints, you could go so far as
wrapping primitive types by using `typing.NewType`:

[[too_many_types]]
.Just taking it way too far, Bob
====
[source,python]
[role="skip"]
----
from dataclasses import dataclass
from typing import NewType

Quantity = NewType("Quantity", int)
Sku = NewType("Sku", str)
Reference = NewType("Reference", str)
...

class Batch:
    def __init__(self, ref: Reference, sku: Sku, qty: Quantity):
        self.sku = sku
        self.reference = ref
        self._purchased_quantity = qty
----
====


That would allow our type checker to make sure that we don't pass a `Sku` where a
`Reference` is expected, for example.

Whether you think this is wonderful or appalling is a matter of debate.footnote:[It is appalling. Please, please don't do this. —Harry]

*******************************************************************************

==== Dataclasses Are Great for Value Objects

((("value objects", "using dataclasses for")))
((("dataclasses", "use for value objects")))
((("domain modeling", "unit testing domain models", "dataclasses for value objects")))
We've used `line` liberally in the previous code listings, but what is a
line? In our business language, an _order_ has multiple _line_ items, where
each line has a SKU and a quantity. We can imagine that a simple YAML file
containing order information might look like this:


[[yaml_order_example]]
.Order info as YAML
====
[source,yaml]
[role="skip"]
----
Order_reference: 12345
Lines:
  - sku: RED-CHAIR
    qty: 25
  - sku: BLU-CHAIR
    qty: 25
  - sku: GRN-CHAIR
    qty: 25
----
====



Notice that while an order has a _reference_ that uniquely identifies it, a
_line_ does not. (Even if we add the order reference to the `OrderLine` class,
it's not something that uniquely identifies the line itself.)

((("value objects", "defined")))
Whenever we have a business concept that has data but no identity, we
often choose to represent it using the _Value Object_ pattern. A _value object_ is any
domain object that is uniquely identified by the data it holds; we usually
make them immutable:

// [SG] seems a bit odd to hear about value objects before any mention of entities.

[[orderline_value_object]]
.OrderLine is a value object
====
[source,python]
[role="skip"]
----
@dataclass(frozen=True)
class OrderLine:
    orderid: OrderReference
    sku: ProductReference
    qty: Quantity
----
====

((("namedtuples", seealso="dataclasses")))
One of the nice things that dataclasses (or namedtuples) give us is _value
equality_, which is the fancy way of saying, "Two lines with the same `orderid`,
`sku`, and `qty` are equal."


[[more_value_objects]]
.More examples of value objects
====
[source,python]
[role="skip"]
----
from dataclasses import dataclass
from typing import NamedTuple
from collections import namedtuple

@dataclass(frozen=True)
class Name:
    first_name: str
    surname: str

class Money(NamedTuple):
    currency: str
    value: int

Line = namedtuple('Line', ['sku', 'qty'])

def test_equality():
    assert Money('gbp', 10) == Money('gbp', 10)
    assert Name('Harry', 'Percival') != Name('Bob', 'Gregory')
    assert Line('RED-CHAIR', 5) == Line('RED-CHAIR', 5)
----
====

((("value objects", "math with")))
These value objects match our real-world intuition about how their values
work. It doesn't matter _which_ £10 note we're talking about, because they all
have the same value. Likewise, two names are equal if both the first and last
names match; and two lines are equivalent if they have the same customer order,
product code, and quantity. We can still have complex behavior on a value
object, though. In fact, it's common to support operations on values; for
example, mathematical operators:


[[value_object_maths]]
.Math with value objects
====
[source,python]
[role="skip"]
----
fiver = Money('gbp', 5)
tenner = Money('gbp', 10)

def can_add_money_values_for_the_same_currency():
    assert fiver + fiver == tenner

def can_subtract_money_values():
    assert tenner - fiver == fiver

def adding_different_currencies_fails():
    with pytest.raises(ValueError):
        Money('usd', 10) + Money('gbp', 10)

def can_multiply_money_by_a_number():
    assert fiver * 5 == Money('gbp', 25)

def multiplying_two_money_values_is_an_error():
    with pytest.raises(TypeError):
        tenner * fiver
----
====




==== Value Objects and Entities

((("value objects", "and entities", secondary-sortas="entities")))
((("domain modeling", "unit testing domain models", "value objects and entities")))
An order line is uniquely identified by its order ID, SKU, and quantity; if we
change one of those values, we now have a new line. That's the definition of a
value object: any object that is identified only by its data and doesn't have a
long-lived identity. What about a batch, though? That _is_ identified by a
reference.

((("entities", "defined")))
We use the term _entity_ to describe a domain object that has long-lived
identity. On the previous page, we introduced a `Name` class as a value object.
If we take the name Harry Percival and change one letter, we have the new
`Name` object Barry Percival.

It should be clear that Harry Percival is not equal to Barry Percival:


[[test_equality]]
.A name itself cannot change...
====
[source,python]
[role="skip"]
----
def test_name_equality():
    assert Name("Harry", "Percival") != Name("Barry", "Percival")
----
====


But what about Harry as a _person_? People do change their names, and their
marital status, and even their gender, but we continue to recognize them as the
same individual. That's because humans, unlike names, have a persistent
_identity_:


[[person_identity]]
.But a person can!
====
[source,python]
[role="skip"]
----
class Person:

    def __init__(self, name: Name):
        self.name = name


def test_barry_is_harry():
    harry = Person(Name("Harry", "Percival"))
    barry = harry

    barry.name = Name("Barry", "Percival")

    assert harry is barry and barry is harry
----
====



((("entities", "identity equality")))
((("identity equality (entities)")))
Entities, unlike values, have _identity equality_. We can change their values,
and they are still recognizably the same thing. Batches, in our example, are
entities. We can allocate lines to a batch, or change the date that we expect
it to arrive, and it will still be the same entity.

((("equality operators, implementing on entities")))
We usually make this explicit in code by implementing equality operators on
entities:



[[equality_on_batches]]
.Implementing equality operators (model.py)
====
[source,python]
----
class Batch:
    ...

    def __eq__(self, other):
        if not isinstance(other, Batch):
            return False
        return other.reference == self.reference

    def __hash__(self):
        return hash(self.reference)
----
====

((("magic methods", "&#x5f;&#x5f;eq&#x5f;&#x5f;", secondary-sortas="eq")))
((("&#x5f;&#x5f;eq&#x5f;&#x5f;magic method", primary-sortas="eq")))
Python's +++<code>__eq__</code>+++ magic method
defines the behavior of the class for the `==` operator.footnote:[The
+++<code>__eq__</code>+++ method is pronounced "dunder-EQ." By some, at least.]

((("magic methods", "&#x5f;&#x5f;hash&#x5f;&#x5f;", secondary-sortas="hash")))
((("&#x5f;&#x5f;hash&#x5f;&#x5f; magic method", primary-sortas="hash")))
For both entity and value objects, it's also worth thinking through how
+++<code>__hash__</code>+++ will work.  It's the magic method Python uses to control the
behavior of objects when you add them to sets or use them as dict keys;
you can find more info https://oreil.ly/YUzg5[in the Python docs].

For value objects, the hash should be based on all the value attributes,
and we should ensure that the objects are immutable.  We get this for
free by specifying `@frozen=True` on the dataclass.

For entities, the simplest option is to say that the hash is ++None++, meaning
that the object is not hashable and cannot, for example, be used in a set.
If for some reason you decide you really do want to use set or dict operations
with entities, the hash should be based on the attribute(s), such as
`.reference`, that defines the entity's unique identity over time. You should
also try to somehow make _that_ attribute read-only.

WARNING: This is tricky territory; you shouldn't modify +++<code>__hash__</code>+++
    without also modifying +++<code>__eq__</code>+++.  If you're not sure what
    you're doing, further reading is suggested.
    https://oreil.ly/vxkgX["Python Hashes and Equality"] by our tech reviewer
    Hynek Schlawack is a good place to start.
    ((("unit testing", "of domain models", startref="ix_UTDM")))
    ((("domain modeling", "unit testing domain models", startref="ix_dommodUT")))



=== Not Everything Has to Be an Object: A Domain Service Function

((("domain services")))
((("domain modeling", "functions for domain services", id="ix_dommodfnc")))
We've made a model to represent batches, but what we actually need
to do is allocate order lines against a specific set of batches that
represent all our stock.

[quote, Eric Evans, Domain-Driven Design]
____
Sometimes, it just isn't a thing.
____

((("service-layer services vs. domain services")))
Evans discusses the idea of Domain Service
operations that don't have a natural home in an entity or value
object.footnote:[Domain services are not the same thing as the services from
the <<chapter_04_service_layer,service layer>>, although they are
often closely related. A domain service represents a business concept or
process, whereas a service-layer service represents a use case for your
application. Often the service layer will call a domain service.] A
thing that allocates an order line, given a set of batches, sounds a lot like a
function, and we can take advantage of the fact that Python is a multiparadigm
language and just make it a function.
((("domain services", "function for")))

Let's see how we might test-drive such a function:


[[test_allocate]]
.Testing our domain service (test_allocate.py)
====
[source,python]
----
def test_prefers_current_stock_batches_to_shipments():
    in_stock_batch = Batch("in-stock-batch", "RETRO-CLOCK", 100, eta=None)
    shipment_batch = Batch("shipment-batch", "RETRO-CLOCK", 100, eta=tomorrow)
    line = OrderLine("oref", "RETRO-CLOCK", 10)

    allocate(line, [in_stock_batch, shipment_batch])

    assert in_stock_batch.available_quantity == 90
    assert shipment_batch.available_quantity == 100


def test_prefers_earlier_batches():
    earliest = Batch("speedy-batch", "MINIMALIST-SPOON", 100, eta=today)
    medium = Batch("normal-batch", "MINIMALIST-SPOON", 100, eta=tomorrow)
    latest = Batch("slow-batch", "MINIMALIST-SPOON", 100, eta=later)
    line = OrderLine("order1", "MINIMALIST-SPOON", 10)

    allocate(line, [medium, earliest, latest])

    assert earliest.available_quantity == 90
    assert medium.available_quantity == 100
    assert latest.available_quantity == 100


def test_returns_allocated_batch_ref():
    in_stock_batch = Batch("in-stock-batch-ref", "HIGHBROW-POSTER", 100, eta=None)
    shipment_batch = Batch("shipment-batch-ref", "HIGHBROW-POSTER", 100, eta=tomorrow)
    line = OrderLine("oref", "HIGHBROW-POSTER", 10)
    allocation = allocate(line, [in_stock_batch, shipment_batch])
    assert allocation == in_stock_batch.reference
----
====

((("functions", "for domain services")))
And our service might look like this:


[[domain_service]]
.A standalone function for our domain service (model.py)
====
[source,python]
[role="non-head"]
----
def allocate(line: OrderLine, batches: List[Batch]) -> str:
    batch = next(
        b for b in sorted(batches) if b.can_allocate(line)
    )
    batch.allocate(line)
    return batch.reference
----
====

==== Python's Magic Methods Let Us Use Our Models with Idiomatic Python

((("&#x5f;&#x5f;gt&#x5f;&#x5f; magic method", primary-sortas="gt")))
((("magic methods", "allowing use of domain model with idiomatic Python")))
You may or may not like the use of `next()` in the preceding code, but we're pretty
sure you'll agree that being able to use `sorted()` on our list of
batches is nice, idiomatic Python.

To make it work, we implement +++<code>__gt__</code>+++ on our domain model:



[[dunder_gt]]
.Magic methods can express domain semantics (model.py)
====
[source,python]
----
class Batch:
    ...

    def __gt__(self, other):
        if self.eta is None:
            return False
        if other.eta is None:
            return True
        return self.eta > other.eta
----
====

That's lovely.


==== Exceptions Can Express Domain Concepts Too

((("domain exceptions")))
((("exceptions", "expressing domain concepts")))
We have one final concept to cover: exceptions can be used to express domain
concepts too. In our conversations with domain experts, we've learned about the
possibility that an order cannot be allocated because we are _out of stock_,
and we can capture that by using a _domain exception_:


[[test_out_of_stock]]
.Testing out-of-stock exception (test_allocate.py)
====
[source,python]
----
def test_raises_out_of_stock_exception_if_cannot_allocate():
    batch = Batch('batch1', 'SMALL-FORK', 10, eta=today)
    allocate(OrderLine('order1', 'SMALL-FORK', 10), [batch])

    with pytest.raises(OutOfStock, match='SMALL-FORK'):
        allocate(OrderLine('order2', 'SMALL-FORK', 1), [batch])
----
====


[role="nobreakinside"]
.Domain Modeling Recap
*****************************************************************
Domain modeling::
    This is the part of your code that is closest to the business,
    the most likely to change, and the place where you deliver the
    most value to the business. Make it easy to understand and modify.
    ((("domain modeling", startref="ix_dommod")))

Distinguish entities from value objects::
    A value object is defined by its attributes. It's usually best
    implemented as an immutable type. If you change an attribute on
    a Value Object, it represents a different object. In contrast,
    an entity has attributes that may vary over time and it will still be the
    same entity. It's important to define what _does_ uniquely identify
    an entity (usually some sort of name or reference field).
    ((("entities", "value objects versus")))
    ((("value objects", "entities versus")))

Not everything has to be an object::
    Python is a multiparadigm language, so let the "verbs" in your
    code be functions. For every `FooManager`, `BarBuilder`, or `BazFactory`,
    there's often a more expressive and readable `manage_foo()`, `build_bar()`,
    or `get_baz()` waiting to happen.
    ((("functions")))

This is the time to apply your best OO design principles::
    Revisit the SOLID principles and all the other good heuristics like "has a versus is-a,"
    "prefer composition over inheritance," and so on.
    ((("object-oriented design principles")))

You'll also want to think about consistency boundaries and aggregates::
    But that's a topic for <<chapter_07_aggregate>>.

*****************************************************************

We won't bore you too much with the implementation, but the main thing
to note is that we take care in naming our exceptions in the ubiquitous
language, just as we do our entities, value objects, and services:


[[out_of_stock]]
.Raising a domain exception (model.py)
====
[source,python]
----
class OutOfStock(Exception):
    pass


def allocate(line: OrderLine, batches: List[Batch]) -> str:
    try:
        batch = next(
        ...
    except StopIteration:
        raise OutOfStock(f'Out of stock for sku {line.sku}')
----
====


<<maps_chapter_01_withtext>> is a visual representation of where we've ended up.

[[maps_chapter_01_withtext]]
.Our domain model at the end of the chapter
image::images/apwp_0104.png[]

((("domain modeling", "functions for domain services", startref="ix_dommodfnc")))
That'll probably do for now! We have a domain service that we can use for our
first use case. But first we'll need a database...
